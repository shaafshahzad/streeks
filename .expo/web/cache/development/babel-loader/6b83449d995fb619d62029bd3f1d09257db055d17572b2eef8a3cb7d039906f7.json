{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport CircularProgress from 'react-native-circular-progress-indicator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Streak = function Streak(_ref) {\n  var streakName = _ref.streakName,\n    onPress = _ref.onPress,\n    active = _ref.active,\n    createdDate = _ref.createdDate,\n    frequency = _ref.frequency;\n  var _useState = useState(1),\n    _useState2 = _slicedToArray(_useState, 2),\n    count = _useState2[0],\n    setCount = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    canStreak = _useState4[0],\n    setCanStreak = _useState4[1];\n  var containerStyle = [styles.streakContainer, active ? styles.activeStreakContainer : styles.inactiveStreakContainer];\n  var textStyle = active ? styles.activeStreakText : styles.inactiveStreakText;\n  var handlePress = function handlePress() {\n    if (active) {\n      if (canStreak) {\n        setCanStreak(false);\n        Alert.alert('Confirm Streak', 'Are you ready to add to your streek?', [{\n          text: 'Cancel',\n          style: 'cancel'\n        }, {\n          text: 'Confirm',\n          onPress: incrementCount\n        }]);\n      } else {\n        Alert.alert('Cannot Streek', 'You can only add to a streek once a day.');\n      }\n    } else {\n      incrementCount();\n    }\n  };\n  var incrementCount = function incrementCount() {\n    var newCount = count + 1;\n    setCount(newCount);\n    onPress();\n  };\n  useEffect(function () {\n    var interval;\n    var today = new Date().setHours(0, 0, 0, 0);\n    if (frequency === 'Hourly') {\n      console.log('hourly');\n      interval = 60 * 60 * 1000;\n    } else if (frequency === 'Daily') {\n      interval = 24 * 60 * 60 * 1000;\n    } else if (frequency === 'Weekly') {\n      interval = 7 * 24 * 60 * 60 * 1000;\n    } else if (frequency === 'Monthly') {\n      var currentMonth = new Date().getMonth();\n      var nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;\n      var nextMonthDate = new Date();\n      nextMonthDate.setMonth(nextMonth);\n      nextMonthDate.setDate(1);\n      nextMonthDate.setHours(0, 0, 0, 0);\n      var timeUntilNextMonth = nextMonthDate - today;\n      interval = timeUntilNextMonth;\n    }\n    var timer = setTimeout(function () {\n      setCanStreak(true);\n    }, interval);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [frequency]);\n  var formattedDate = new Date(createdDate).toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  });\n  return _jsx(TouchableOpacity, {\n    onPress: handlePress,\n    activeOpacity: 0.5,\n    children: _jsxs(View, {\n      style: containerStyle,\n      children: [_jsx(Text, {\n        style: textStyle,\n        numberOfLines: 1,\n        children: streakName\n      }), active && _jsx(CircularProgress, {\n        value: count,\n        maxValue: 10,\n        progressValueColor: \"#383D54\",\n        progressValueFontSize: 30,\n        radius: 45,\n        strokeColorConfig: [{\n          color: '#3DC330',\n          value: 0\n        }, {\n          color: '#6627B8',\n          value: 25\n        }, {\n          color: '#279AB8',\n          value: 50\n        }, {\n          color: '#D8E867',\n          value: 75\n        }, {\n          color: '#FF2200',\n          value: 100\n        }],\n        activeStrokeWidth: 15,\n        inActiveStrokeWidth: 15,\n        duration: 500\n      }), !active && _jsxs(View, {\n        children: [_jsxs(Text, {\n          style: styles.info,\n          children: [\"Last Streaked: \", count]\n        }), _jsxs(Text, {\n          style: styles.info,\n          children: [\"Date Added: \", formattedDate]\n        })]\n      })]\n    })\n  });\n};\nexport default Streak;\nvar styles = StyleSheet.create({\n  streakContainer: {\n    width: '100%',\n    height: 70,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    marginRight: 10,\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  inactiveStreakContainer: {\n    alignItems: 'flex-start',\n    justifyContent: 'space-evenly',\n    paddingHorizontal: 10,\n    marginBottom: 10\n  },\n  activeStreakContainer: {\n    backgroundColor: 'white',\n    height: 150,\n    width: 150,\n    paddingTop: 15,\n    paddingBottom: 15\n  },\n  inactiveStreakText: {\n    fontSize: 18,\n    fontWeight: '300'\n  },\n  activeStreakText: {\n    fontSize: 18,\n    fontWeight: '300'\n  },\n  info: {\n    fontSize: 12,\n    fontWeight: '400',\n    color: '#909090'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","StyleSheet","Text","TouchableOpacity","View","Alert","CircularProgress","jsx","_jsx","jsxs","_jsxs","Streak","_ref","streakName","onPress","active","createdDate","frequency","_useState","_useState2","_slicedToArray","count","setCount","_useState3","_useState4","canStreak","setCanStreak","containerStyle","styles","streakContainer","activeStreakContainer","inactiveStreakContainer","textStyle","activeStreakText","inactiveStreakText","handlePress","alert","text","style","incrementCount","newCount","interval","today","Date","setHours","console","log","currentMonth","getMonth","nextMonth","nextMonthDate","setMonth","setDate","timeUntilNextMonth","timer","setTimeout","clearTimeout","formattedDate","toLocaleDateString","month","day","year","activeOpacity","children","numberOfLines","value","maxValue","progressValueColor","progressValueFontSize","radius","strokeColorConfig","color","activeStrokeWidth","inActiveStrokeWidth","duration","info","create","width","height","backgroundColor","borderRadius","marginRight","alignItems","justifyContent","paddingHorizontal","marginBottom","paddingTop","paddingBottom","fontSize","fontWeight"],"sources":["/Users/shaaf/repos/streek/components/Streak.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Alert } from 'react-native';\nimport CircularProgress from 'react-native-circular-progress-indicator';\n\nconst Streak = ({ streakName, onPress, active, createdDate, frequency }) => {\n  const [count, setCount] = useState(1);\n  const [canStreak, setCanStreak] = useState(false);\n\n  const containerStyle = [\n    styles.streakContainer,\n    active ? styles.activeStreakContainer : styles.inactiveStreakContainer,\n  ];\n\n  const textStyle = active ? styles.activeStreakText : styles.inactiveStreakText;\n\n  const handlePress = () => {\n    if (active) {\n      if (canStreak) {\n        setCanStreak(false);\n        Alert.alert(\n          'Confirm Streak',\n          'Are you ready to add to your streek?',\n          [\n            { text: 'Cancel', style: 'cancel' },\n            { text: 'Confirm', onPress: incrementCount },\n          ]\n        );\n      } else {\n        Alert.alert('Cannot Streek', 'You can only add to a streek once a day.');\n      }\n    } else {\n      incrementCount();\n    }\n  };\n\n  const incrementCount = () => {\n    const newCount = count + 1;\n    setCount(newCount);\n    onPress();\n  };\n\n  useEffect(() => {\n    let interval;\n    const today = new Date().setHours(0, 0, 0, 0);\n  \n    if (frequency === 'Hourly') {\n      console.log('hourly');\n      interval = 60 * 60 * 1000;\n    } else if (frequency === 'Daily') {\n      interval = 24 * 60 * 60 * 1000; \n    } else if (frequency === 'Weekly') {\n      interval = 7 * 24 * 60 * 60 * 1000; \n    } else if (frequency === 'Monthly') {\n      const currentMonth = new Date().getMonth();\n      const nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;\n      const nextMonthDate = new Date();\n      nextMonthDate.setMonth(nextMonth);\n      nextMonthDate.setDate(1);\n      nextMonthDate.setHours(0, 0, 0, 0);\n      const timeUntilNextMonth = nextMonthDate - today;\n  \n      interval = timeUntilNextMonth;\n    }\n  \n    const timer = setTimeout(() => {\n      setCanStreak(true);\n    }, interval);\n  \n    return () => clearTimeout(timer);\n  }, [frequency]);  \n\n  const formattedDate = new Date(createdDate).toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n  });\n\n  return (\n    <TouchableOpacity onPress={handlePress} activeOpacity={0.5}>\n      <View style={containerStyle}>\n        <Text style={textStyle} numberOfLines={1}>{streakName}</Text>\n        {active && (\n          <CircularProgress\n            value={count}\n            maxValue={10}\n            progressValueColor=\"#383D54\"\n            progressValueFontSize={30}\n            radius={45}\n            strokeColorConfig={[\n              { color: '#3DC330', value: 0 },\n              { color: '#6627B8', value: 25 },\n              { color: '#279AB8', value: 50 },\n              { color: '#D8E867', value: 75 },\n              { color: '#FF2200', value: 100 },\n            ]}\n            activeStrokeWidth={15}\n            inActiveStrokeWidth={15}\n            duration={500}\n          />\n        )}\n        {!active && (\n          <View>\n            <Text style={styles.info}>Last Streaked: {count}</Text>\n            <Text style={styles.info}>Date Added: {formattedDate}</Text>\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default Streak;\n\nconst styles = StyleSheet.create({\n  streakContainer: {\n    width: '100%',\n    height: 70,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    marginRight: 10,\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  inactiveStreakContainer: {\n    alignItems: 'flex-start',\n    justifyContent: 'space-evenly',\n    paddingHorizontal: 10,\n    marginBottom: 10,\n  },\n  activeStreakContainer: {\n    backgroundColor: 'white',\n    height: 150,\n    width: 150,\n    paddingTop: 15,\n    paddingBottom: 15,\n  },\n  inactiveStreakText: {\n    fontSize: 18,\n    fontWeight: '300',\n  },\n  activeStreakText: {\n    fontSize: 18,\n    fontWeight: '300',\n  },\n  info: {\n    fontSize: 12,\n    fontWeight: '400',\n    color: '#909090',\n  },\n});  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}