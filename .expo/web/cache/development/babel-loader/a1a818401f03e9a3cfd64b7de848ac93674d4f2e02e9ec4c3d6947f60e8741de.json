{"ast":null,"code":"import { useCallback, useEffect, useMemo } from 'react';\nimport { createAnimatedPropAdapter, Easing, interpolateColor, processColor, runOnJS, useAnimatedProps, useDerivedValue, useSharedValue, withDelay, withTiming } from 'react-native-reanimated';\nimport { withPause } from 'react-native-redash';\nimport useCircleValues from \"./useCircleValues\";\nexport default function useAnimatedValue(_ref) {\n  var _ref$initialValue = _ref.initialValue,\n    initialValue = _ref$initialValue === void 0 ? 0 : _ref$initialValue,\n    _ref$radius = _ref.radius,\n    radius = _ref$radius === void 0 ? 60 : _ref$radius,\n    _ref$maxValue = _ref.maxValue,\n    maxValue = _ref$maxValue === void 0 ? 100 : _ref$maxValue,\n    clockwise = _ref.clockwise,\n    startInPausedState = _ref.startInPausedState,\n    _ref$delay = _ref.delay,\n    delay = _ref$delay === void 0 ? 0 : _ref$delay,\n    value = _ref.value,\n    duration = _ref.duration,\n    _ref$onAnimationCompl = _ref.onAnimationComplete,\n    onAnimationComplete = _ref$onAnimationCompl === void 0 ? function () {\n      return null;\n    } : _ref$onAnimationCompl,\n    _ref$activeStrokeWidt = _ref.activeStrokeWidth,\n    activeStrokeWidth = _ref$activeStrokeWidt === void 0 ? 10 : _ref$activeStrokeWidt,\n    _ref$inActiveStrokeWi = _ref.inActiveStrokeWidth,\n    inActiveStrokeWidth = _ref$inActiveStrokeWi === void 0 ? 10 : _ref$inActiveStrokeWi,\n    _ref$progressFormatte = _ref.progressFormatter,\n    progressFormatter = _ref$progressFormatte === void 0 ? function (v) {\n      'worklet';\n\n      return Math.round(v);\n    } : _ref$progressFormatte,\n    _ref$strokeColorConfi = _ref.strokeColorConfig,\n    strokeColorConfig = _ref$strokeColorConfi === void 0 ? undefined : _ref$strokeColorConfi;\n  var paused = useSharedValue(startInPausedState);\n  var animatedValue = useSharedValue(initialValue);\n  var _useCircleValues = useCircleValues({\n      radius: radius,\n      activeStrokeWidth: activeStrokeWidth,\n      inActiveStrokeWidth: inActiveStrokeWidth\n    }),\n    circleCircumference = _useCircleValues.circleCircumference;\n  var pause = useCallback(function () {\n    paused.value = true;\n  }, [paused]);\n  var play = useCallback(function () {\n    paused.value = false;\n  }, [paused]);\n  var resetAnimatedValue = useCallback(function () {\n    paused.value = false;\n    animatedValue.value = initialValue;\n  }, [animatedValue, initialValue, paused]);\n  var animateValue = useCallback(function () {\n    animatedValue.value = withPause(withDelay(delay, withTiming(value, {\n      duration: duration,\n      easing: Easing.linear\n    }, function (isFinished) {\n      if (isFinished) {\n        var _runOnJS;\n        (_runOnJS = runOnJS(onAnimationComplete)) === null || _runOnJS === void 0 ? void 0 : _runOnJS();\n      }\n    })), paused);\n  }, [animatedValue, delay, duration, paused, value]);\n  var reAnimate = function reAnimate() {\n    resetAnimatedValue();\n    animateValue();\n  };\n  var sortedStrokeColors = useMemo(function () {\n    if (!strokeColorConfig) {\n      return null;\n    }\n    return strokeColorConfig.sort(function (a, b) {\n      return a.value - b.value;\n    });\n  }, [strokeColorConfig]);\n  var colors = useMemo(function () {\n    if (!sortedStrokeColors) {\n      return null;\n    }\n    return sortedStrokeColors.map(function (item) {\n      return item.color;\n    });\n  }, [sortedStrokeColors]);\n  var values = useMemo(function () {\n    if (!sortedStrokeColors) {\n      return null;\n    }\n    return sortedStrokeColors.map(function (item) {\n      return item.value;\n    });\n  }, [sortedStrokeColors]);\n  var animatedCircleProps = useAnimatedProps(function () {\n    var biggestValue = Math.max(initialValue, maxValue);\n    biggestValue = biggestValue <= 0 ? 1 : biggestValue;\n    var maxPercentage = clockwise ? 100 * animatedValue.value / biggestValue : 100 * -animatedValue.value / biggestValue;\n    var config = {\n      strokeDashoffset: circleCircumference - circleCircumference * maxPercentage / 100\n    };\n    var strokeColor = colors && values ? interpolateColor(animatedValue.value, values, colors) : undefined;\n    if (strokeColor) {\n      config.stroke = strokeColor;\n    }\n    return config;\n  }, [], createAnimatedPropAdapter(function (props) {\n    if (Object.keys(props).includes('stroke')) {\n      props.stroke = {\n        type: 0,\n        payload: processColor(props.stroke)\n      };\n    }\n  }, ['stroke']));\n  useEffect(function () {\n    animateValue();\n  }, [animateValue]);\n  var progressValue = useDerivedValue(function () {\n    return \"\" + progressFormatter(animatedValue.value);\n  });\n  var animatedTextProps = useAnimatedProps(function () {\n    return {\n      text: progressValue.value\n    };\n  });\n  return {\n    animatedCircleProps: animatedCircleProps,\n    animatedTextProps: animatedTextProps,\n    progressValue: progressValue,\n    pause: pause,\n    play: play,\n    reAnimate: reAnimate\n  };\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","createAnimatedPropAdapter","Easing","interpolateColor","processColor","runOnJS","useAnimatedProps","useDerivedValue","useSharedValue","withDelay","withTiming","withPause","useCircleValues","useAnimatedValue","_ref","_ref$initialValue","initialValue","_ref$radius","radius","_ref$maxValue","maxValue","clockwise","startInPausedState","_ref$delay","delay","value","duration","_ref$onAnimationCompl","onAnimationComplete","_ref$activeStrokeWidt","activeStrokeWidth","_ref$inActiveStrokeWi","inActiveStrokeWidth","_ref$progressFormatte","progressFormatter","v","Math","round","_ref$strokeColorConfi","strokeColorConfig","undefined","paused","animatedValue","_useCircleValues","circleCircumference","pause","play","resetAnimatedValue","animateValue","easing","linear","isFinished","_runOnJS","reAnimate","sortedStrokeColors","sort","a","b","colors","map","item","color","values","animatedCircleProps","biggestValue","max","maxPercentage","config","strokeDashoffset","strokeColor","stroke","props","Object","keys","includes","type","payload","progressValue","animatedTextProps","text"],"sources":["/Users/shaaf/repos/streek/node_modules/react-native-circular-progress-indicator/lib/module/hooks/useAnimatedValue.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo } from 'react';\nimport {\n  createAnimatedPropAdapter,\n  Easing,\n  interpolateColor,\n  processColor,\n  runOnJS,\n  useAnimatedProps,\n  useDerivedValue,\n  useSharedValue,\n  withDelay,\n  withTiming,\n} from 'react-native-reanimated';\nimport { withPause } from 'react-native-redash';\n\nimport type { StrokeColorConfigType } from '../types';\n\nimport useCircleValues from './useCircleValues';\n\nexport interface UseAnimatedValueProps {\n  value: number;\n  initialValue?: number;\n  radius?: number;\n  duration?: number;\n  delay?: number;\n  maxValue?: number;\n  onAnimationComplete?: () => void;\n  activeStrokeWidth?: number;\n  inActiveStrokeWidth?: number;\n  clockwise?: boolean;\n  startInPausedState?: boolean;\n  valueSuffix?: string;\n  valuePrefix?: string;\n  // eslint-disable-next-line no-unused-vars\n  progressFormatter?: (v: number) => number | string;\n  strokeColorConfig?: StrokeColorConfigType[];\n}\n\ntype Config = {\n  strokeDashoffset: number;\n  stroke?: string | number;\n};\n\nexport default function useAnimatedValue({\n  initialValue = 0,\n  radius = 60,\n  maxValue = 100,\n  clockwise,\n  startInPausedState,\n  delay = 0,\n  value,\n  duration,\n  onAnimationComplete = () => null,\n  activeStrokeWidth = 10,\n  inActiveStrokeWidth = 10,\n  progressFormatter = (v: number) => {\n    'worklet';\n\n    return Math.round(v);\n  },\n  strokeColorConfig = undefined,\n}: UseAnimatedValueProps) {\n  const paused = useSharedValue(<boolean>startInPausedState);\n  const animatedValue = useSharedValue(initialValue);\n  const { circleCircumference } = useCircleValues({\n    radius,\n    activeStrokeWidth,\n    inActiveStrokeWidth,\n  });\n\n  const pause = useCallback(() => {\n    paused.value = true;\n  }, [paused]);\n\n  const play = useCallback(() => {\n    paused.value = false;\n  }, [paused]);\n\n  const resetAnimatedValue = useCallback(() => {\n    // reset the paused state to false regardless of the value of\n    // startInPausedState, as calling reAnimate is expected to restart\n    // the animation.\n    paused.value = false;\n    animatedValue.value = initialValue;\n  }, [animatedValue, initialValue, paused]);\n\n  const animateValue = useCallback(() => {\n    animatedValue.value = withPause(\n      withDelay(\n        delay,\n        withTiming(value, { duration, easing: Easing.linear }, isFinished => {\n          if (isFinished) {\n            runOnJS(onAnimationComplete)?.();\n          }\n        })\n      ),\n      paused\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedValue, delay, duration, paused, value]);\n\n  const reAnimate = () => {\n    resetAnimatedValue();\n    animateValue();\n  };\n\n  const sortedStrokeColors = useMemo(() => {\n    if (!strokeColorConfig) {\n      return null;\n    }\n    return strokeColorConfig.sort((a, b) => a.value - b.value);\n  }, [strokeColorConfig]);\n\n  const colors = useMemo(() => {\n    if (!sortedStrokeColors) {\n      return null;\n    }\n    return sortedStrokeColors.map(item => item.color);\n  }, [sortedStrokeColors]);\n\n  const values = useMemo(() => {\n    if (!sortedStrokeColors) {\n      return null;\n    }\n    return sortedStrokeColors.map(item => item.value);\n  }, [sortedStrokeColors]);\n\n  const animatedCircleProps = useAnimatedProps(\n    () => {\n      let biggestValue: number = Math.max(initialValue, maxValue);\n      biggestValue = biggestValue <= 0 ? 1 : biggestValue;\n      const maxPercentage: number = clockwise\n        ? (100 * animatedValue.value) / biggestValue\n        : (100 * -animatedValue.value) / biggestValue;\n      const config: Config = {\n        strokeDashoffset:\n          circleCircumference - (circleCircumference * maxPercentage) / 100,\n      };\n      const strokeColor =\n        colors && values\n          ? interpolateColor(animatedValue.value, values, colors)\n          : undefined;\n      if (strokeColor) {\n        config.stroke = strokeColor;\n      }\n      return config;\n    },\n    [],\n    createAnimatedPropAdapter(\n      props => {\n        if (Object.keys(props).includes('stroke')) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          props.stroke = { type: 0, payload: processColor(props.stroke) };\n        }\n      },\n      ['stroke']\n    )\n  );\n\n  useEffect(() => {\n    animateValue();\n  }, [animateValue]);\n\n  const progressValue = useDerivedValue(() => {\n    return `${progressFormatter(animatedValue.value)}`;\n  });\n\n  const animatedTextProps = useAnimatedProps(() => {\n    return {\n      text: progressValue.value,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  });\n\n  return {\n    animatedCircleProps,\n    animatedTextProps,\n    progressValue,\n    pause,\n    play,\n    reAnimate,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}