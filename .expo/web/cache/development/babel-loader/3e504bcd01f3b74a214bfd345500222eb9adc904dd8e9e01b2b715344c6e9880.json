{"ast":null,"code":"export var canvas2Cartesian = function canvas2Cartesian(v, center) {\n  \"worklet\";\n\n  return {\n    x: v.x - center.x,\n    y: -1 * (v.y - center.y)\n  };\n};\nexport var cartesian2Canvas = function cartesian2Canvas(v, center) {\n  \"worklet\";\n\n  return {\n    x: v.x + center.x,\n    y: -1 * v.y + center.y\n  };\n};\nexport var cartesian2Polar = function cartesian2Polar(v) {\n  \"worklet\";\n\n  return {\n    theta: Math.atan2(v.y, v.x),\n    radius: Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2))\n  };\n};\nexport var polar2Cartesian = function polar2Cartesian(p) {\n  \"worklet\";\n\n  return {\n    x: p.radius * Math.cos(p.theta),\n    y: p.radius * Math.sin(p.theta)\n  };\n};\nexport var polar2Canvas = function polar2Canvas(p, center) {\n  \"worklet\";\n\n  return cartesian2Canvas(polar2Cartesian(p), center);\n};\nexport var canvas2Polar = function canvas2Polar(v, center) {\n  \"worklet\";\n\n  return cartesian2Polar(canvas2Cartesian(v, center));\n};","map":{"version":3,"names":["canvas2Cartesian","v","center","x","y","cartesian2Canvas","cartesian2Polar","theta","Math","atan2","radius","sqrt","pow","polar2Cartesian","p","cos","sin","polar2Canvas","canvas2Polar"],"sources":["/Users/shaaf/repos/streek/node_modules/react-native-redash/lib/module/Coordinates.ts"],"sourcesContent":["import type { Vector } from \"./Vectors\";\n\nexport interface PolarPoint {\n  theta: number;\n  radius: number;\n}\n\n/**\n * @worklet\n */\nexport const canvas2Cartesian = (v: Vector, center: Vector) => {\n  \"worklet\";\n  return {\n    x: v.x - center.x,\n    y: -1 * (v.y - center.y),\n  };\n};\n\n/**\n * @worklet\n */\nexport const cartesian2Canvas = (v: Vector, center: Vector) => {\n  \"worklet\";\n  return {\n    x: v.x + center.x,\n    y: -1 * v.y + center.y,\n  };\n};\n\n/**\n * @worklet\n */\nexport const cartesian2Polar = (v: Vector) => {\n  \"worklet\";\n  return {\n    theta: Math.atan2(v.y, v.x),\n    radius: Math.sqrt(v.x ** 2 + v.y ** 2),\n  };\n};\n\n/**\n * @worklet\n */\nexport const polar2Cartesian = (p: PolarPoint) => {\n  \"worklet\";\n  return {\n    x: p.radius * Math.cos(p.theta),\n    y: p.radius * Math.sin(p.theta),\n  };\n};\n\n/**\n * @worklet\n */\nexport const polar2Canvas = (p: PolarPoint, center: Vector) => {\n  \"worklet\";\n  return cartesian2Canvas(polar2Cartesian(p), center);\n};\n\n/**\n * @worklet\n */\nexport const canvas2Polar = (v: Vector, center: Vector) => {\n  \"worklet\";\n  return cartesian2Polar(canvas2Cartesian(v, center));\n};\n"],"mappings":"AAUA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmBA,CAACC,CAAD,EAAYC,MAAZ,EAA+B;EAC7D;;EACA,OAAO;IACLC,CAAC,EAAEF,CAAC,CAACE,CAAF,GAAMD,MAAM,CAACC,CADX;IAELC,CAAC,EAAE,CAAC,CAAD,IAAMH,CAAC,CAACG,CAAF,GAAMF,MAAM,CAACE,CAAnB;EAFE,CAAP;AAID,CANM;AAWP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmBA,CAACJ,CAAD,EAAYC,MAAZ,EAA+B;EAC7D;;EACA,OAAO;IACLC,CAAC,EAAEF,CAAC,CAACE,CAAF,GAAMD,MAAM,CAACC,CADX;IAELC,CAAC,EAAE,CAAC,CAAD,GAAKH,CAAC,CAACG,CAAP,GAAWF,MAAM,CAACE;EAFhB,CAAP;AAID,CANM;AAWP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkBA,CAACL,CAAD,EAAe;EAC5C;;EACA,OAAO;IACLM,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWR,CAAC,CAACG,CAAb,EAAgBH,CAAC,CAACE,CAAlB,CADF;IAELO,MAAM,EAAEF,IAAI,CAACG,IAAL,CAAUH,IAAA,CAAAI,GAAA,CAAAX,CAAC,CAACE,CAAF,EAAO,CAAP,IAAAK,IAAA,CAAAI,GAAA,CAAWX,CAAC,CAACG,CAAb,EAAkB,CAAlB,CAAV;EAFH,CAAP;AAID,CANM;AAWP,OAAO,IAAMS,eAAe,GAAG,SAAlBA,eAAkBA,CAACC,CAAD,EAAmB;EAChD;;EACA,OAAO;IACLX,CAAC,EAAEW,CAAC,CAACJ,MAAF,GAAWF,IAAI,CAACO,GAAL,CAASD,CAAC,CAACP,KAAX,CADT;IAELH,CAAC,EAAEU,CAAC,CAACJ,MAAF,GAAWF,IAAI,CAACQ,GAAL,CAASF,CAAC,CAACP,KAAX;EAFT,CAAP;AAID,CANM;AAWP,OAAO,IAAMU,YAAY,GAAG,SAAfA,YAAeA,CAACH,CAAD,EAAgBZ,MAAhB,EAAmC;EAC7D;;EACA,OAAOG,gBAAgB,CAACQ,eAAe,CAACC,CAAD,CAAhB,EAAqBZ,MAArB,CAAvB;AACD,CAHM;AAQP,OAAO,IAAMgB,YAAY,GAAG,SAAfA,YAAeA,CAACjB,CAAD,EAAYC,MAAZ,EAA+B;EACzD;;EACA,OAAOI,eAAe,CAACN,gBAAgB,CAACC,CAAD,EAAIC,MAAJ,CAAjB,CAAtB;AACD,CAHM"},"metadata":{},"sourceType":"module","externalDependencies":[]}